		/*mass*/
		public function get m():Number {return _m;}
		public function set m(val:Number):void {_m = Math.abs(val);}
		private var _m:Number;
		
		/*Vector p intergrated with sprite's possition
		 * Note that you can not point it to another vector*/
		public function get p():Vector2D {return _p;}
		public function set p(val:Vector2D):void {_p.copy(val);}
		private var _p:IntergratedVector2D;
		
		/*vetor velocity*/
		public function get v():Vector2D {return _v;}
		public function set v(val:Vector2D):void {_v = val;}
		private var _v:Vector2D = new Vector2D(0, 0);
		
		/*sprite rotation in radian*/
		public function get angle():Number  {return sprite.rotation/180*Math.PI;}
		public function set angle(val:Number ):void {sprite.rotation = val/Math.PI*180;}
		
		/*Angular velocity*/
		public function get spin():Number  {return _spin;}
		public function set spin(val:Number ):void {_spin = val;}
		private var _spin:Number=0;
		
		/*delta t per step (time's scale) */
		public function get dt():Number  {return _dt;}
		public function set dt(val:Number ):void {_dt = val;}
		private var _dt:Number=1;
		
		/*Friction*/
		public function get fric():Number  {return _fric;}
		public function set fric(val:Number ):void {_fric = val;}
		private var _fric:Number=0 ;	
		